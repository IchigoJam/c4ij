
obj/c4ij.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f0  00006400  00006400  00006400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_info   0000068a  00000000  00000000  000064f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_abbrev 0000017d  00000000  00000000  00006b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_loc    0000010f  00000000  00000000  00006cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00006e06  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_ranges 00000030  00000000  00000000  00006e26  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000009d  00000000  00000000  00006e56  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000559  00000000  00000000  00006ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .comment      0000007f  00000000  00000000  0000744c  2**0
                  CONTENTS, READONLY
  9 .ARM.attributes 00000031  00000000  00000000  000074cb  2**0
                  CONTENTS, READONLY
 10 .debug_frame  00000034  00000000  00000000  000074fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00006400 <main>:
int main(int param, int ram, int rom, int (*divfunc)()) {
	const int sec5 = 5; // last sector of IchigoJam OS
	const int keymap = 7;

	// param #E00 or #F00
	param = (*(uint8_t*)(sec5 * 0x1000 + 0x100 * keymap) + 0xe) * 0x100;
    6400:	23ae      	movs	r3, #174	; 0xae
int main(int param, int ram, int rom, int (*divfunc)()) {
    6402:	b5f0      	push	{r4, r5, r6, r7, lr}
    6404:	b0c5      	sub	sp, #276	; 0x114
    6406:	9103      	str	r1, [sp, #12]
	param = (*(uint8_t*)(sec5 * 0x1000 + 0x100 * keymap) + 0xe) * 0x100;
    6408:	01db      	lsls	r3, r3, #7
    640a:	781b      	ldrb	r3, [r3, #0]
    640c:	330e      	adds	r3, #14
    640e:	021b      	lsls	r3, r3, #8
    6410:	9302      	str	r3, [sp, #8]
	IAPRESULT_INVALID_STOP_BIT,
	IAPRESULT_CODE_READ_PROTECTION_ENABLED,
};

static inline void enable_irq()		{ __asm volatile ("cpsie i"); }
static inline void disable_irq()	{ __asm volatile ("cpsid i"); }
    6412:	b672      	cpsid	i
	int res;
	uint8_t buf[0x100];

	// PS/2キーボードマップ変更
	disable_irq();
	int sec = flash_blankCheck(6, 6) == IAPRESULT_CMD_SUCCESS ? 6 : 7;
    6414:	2206      	movs	r2, #6
    6416:	23e8      	movs	r3, #232	; 0xe8
    6418:	0011      	movs	r1, r2
    641a:	881b      	ldrh	r3, [r3, #0]
    641c:	2035      	movs	r0, #53	; 0x35
    641e:	4798      	blx	r3
    6420:	1e43      	subs	r3, r0, #1
    6422:	4198      	sbcs	r0, r3
			//memcpy(buf, (void*)PS2_KB_MAP_US, 0x100);
			//memcpy(buf, PS2_KB_MAP_JP, 0x100);
			//memcpy(buf, (uint8_t*)(ram + 0xf00), 0x100);
			memcpy(buf, (uint8_t*)(ram + param), 0x100);
		} else {
			memcpy(buf, (uint8_t*)(sec5 * 0x1000 + 0x100 * i), 0x100);
    6424:	2780      	movs	r7, #128	; 0x80
	for (int i = 0; i < 16; i++) {
    6426:	2400      	movs	r4, #0
	int sec = flash_blankCheck(6, 6) == IAPRESULT_CMD_SUCCESS ? 6 : 7;
    6428:	1d86      	adds	r6, r0, #6
//			src = buf;
		}
		flash_prepare(sec, sec);
//		flash_copyRAMtoFlash((uint8_t*)(sec * 0x1000 + 0x100 * i), src, 0x100); // 256byteずつ
		flash_copyRAMtoFlash((uint8_t*)(sec * 0x1000 + 0x100 * i), buf, 0x100); // 256byteずつ
    642a:	0133      	lsls	r3, r6, #4
    642c:	9301      	str	r3, [sp, #4]
			memcpy(buf, (uint8_t*)(sec5 * 0x1000 + 0x100 * i), 0x100);
    642e:	007f      	lsls	r7, r7, #1
    6430:	23e6      	movs	r3, #230	; 0xe6
    6432:	881b      	ldrh	r3, [r3, #0]
		if (i == keymap) { // keymap のみ変更
    6434:	2c07      	cmp	r4, #7
    6436:	d155      	bne.n	64e4 <main+0xe4>
			memcpy(buf, (uint8_t*)(ram + param), 0x100);
    6438:	9a02      	ldr	r2, [sp, #8]
    643a:	9903      	ldr	r1, [sp, #12]
    643c:	1851      	adds	r1, r2, r1
			memcpy(buf, (uint8_t*)(sec5 * 0x1000 + 0x100 * i), 0x100);
    643e:	003a      	movs	r2, r7
    6440:	a804      	add	r0, sp, #16
    6442:	4798      	blx	r3
		flash_prepare(sec, sec);
    6444:	23e8      	movs	r3, #232	; 0xe8
    6446:	0032      	movs	r2, r6
    6448:	881b      	ldrh	r3, [r3, #0]
    644a:	0031      	movs	r1, r6
    644c:	2032      	movs	r0, #50	; 0x32
    644e:	4798      	blx	r3
		flash_copyRAMtoFlash((uint8_t*)(sec * 0x1000 + 0x100 * i), buf, 0x100); // 256byteずつ
    6450:	9b01      	ldr	r3, [sp, #4]
    6452:	a904      	add	r1, sp, #16
    6454:	18e2      	adds	r2, r4, r3
    6456:	23ea      	movs	r3, #234	; 0xea
    6458:	881b      	ldrh	r3, [r3, #0]
    645a:	0212      	lsls	r2, r2, #8
    645c:	001d      	movs	r5, r3
    645e:	2033      	movs	r0, #51	; 0x33
    6460:	003b      	movs	r3, r7
	for (int i = 0; i < 16; i++) {
    6462:	3401      	adds	r4, #1
		flash_copyRAMtoFlash((uint8_t*)(sec * 0x1000 + 0x100 * i), buf, 0x100); // 256byteずつ
    6464:	47a8      	blx	r5
	for (int i = 0; i < 16; i++) {
    6466:	2c10      	cmp	r4, #16
    6468:	d1e2      	bne.n	6430 <main+0x30>
	}

	// erase sector5
	flash_prepare(sec5, sec5);
    646a:	2205      	movs	r2, #5
    646c:	34d8      	adds	r4, #216	; 0xd8
    646e:	8823      	ldrh	r3, [r4, #0]
    6470:	0011      	movs	r1, r2
    6472:	2032      	movs	r0, #50	; 0x32
    6474:	4798      	blx	r3
	flash_erase(sec5, sec5);
    6476:	2205      	movs	r2, #5
    6478:	8823      	ldrh	r3, [r4, #0]
    647a:	24a0      	movs	r4, #160	; 0xa0
    647c:	0011      	movs	r1, r2
    647e:	2034      	movs	r0, #52	; 0x34
    6480:	4798      	blx	r3
    6482:	9b01      	ldr	r3, [sp, #4]
    6484:	01e4      	lsls	r4, r4, #7
    6486:	021b      	lsls	r3, r3, #8
    6488:	9301      	str	r3, [sp, #4]

	// copy sec -> sector5
	for (int i = 0; i < 16; i++) {
		memcpy(buf, (void*)(sec * 0x1000 + 0x100 * i), 0x100);
    648a:	9b01      	ldr	r3, [sp, #4]
    648c:	4a17      	ldr	r2, [pc, #92]	; (64ec <main+0xec>)
    648e:	a804      	add	r0, sp, #16
    6490:	1899      	adds	r1, r3, r2
    6492:	23e6      	movs	r3, #230	; 0xe6
    6494:	2280      	movs	r2, #128	; 0x80
    6496:	1909      	adds	r1, r1, r4
    6498:	881b      	ldrh	r3, [r3, #0]
    649a:	0052      	lsls	r2, r2, #1
    649c:	4798      	blx	r3
		flash_prepare(sec5, sec5);
    649e:	25e8      	movs	r5, #232	; 0xe8
    64a0:	2205      	movs	r2, #5
    64a2:	882b      	ldrh	r3, [r5, #0]
    64a4:	0011      	movs	r1, r2
    64a6:	2032      	movs	r0, #50	; 0x32
    64a8:	4798      	blx	r3
		flash_copyRAMtoFlash((uint8_t*)(sec5 * 0x1000 + 0x100 * i), buf, 0x100); // 256byteずつ
    64aa:	23ea      	movs	r3, #234	; 0xea
    64ac:	881b      	ldrh	r3, [r3, #0]
    64ae:	0022      	movs	r2, r4
    64b0:	001f      	movs	r7, r3
    64b2:	2380      	movs	r3, #128	; 0x80
    64b4:	a904      	add	r1, sp, #16
    64b6:	005b      	lsls	r3, r3, #1
    64b8:	2033      	movs	r0, #51	; 0x33
    64ba:	47b8      	blx	r7
	for (int i = 0; i < 16; i++) {
    64bc:	23c0      	movs	r3, #192	; 0xc0
    64be:	3401      	adds	r4, #1
    64c0:	34ff      	adds	r4, #255	; 0xff
    64c2:	01db      	lsls	r3, r3, #7
    64c4:	429c      	cmp	r4, r3
    64c6:	d1e0      	bne.n	648a <main+0x8a>
	}

	// erase sec
	flash_prepare(sec, sec);
    64c8:	882b      	ldrh	r3, [r5, #0]
    64ca:	0032      	movs	r2, r6
    64cc:	0031      	movs	r1, r6
    64ce:	2032      	movs	r0, #50	; 0x32
    64d0:	4798      	blx	r3
	res = flash_erase(sec, sec);
    64d2:	882b      	ldrh	r3, [r5, #0]
    64d4:	0032      	movs	r2, r6
    64d6:	0031      	movs	r1, r6
    64d8:	2034      	movs	r0, #52	; 0x34
    64da:	4798      	blx	r3
static inline void enable_irq()		{ __asm volatile ("cpsie i"); }
    64dc:	b662      	cpsie	i

	enable_irq();
	return param;
}
    64de:	9802      	ldr	r0, [sp, #8]
    64e0:	b045      	add	sp, #276	; 0x114
    64e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			memcpy(buf, (uint8_t*)(sec5 * 0x1000 + 0x100 * i), 0x100);
    64e4:	0021      	movs	r1, r4
    64e6:	3150      	adds	r1, #80	; 0x50
    64e8:	0209      	lsls	r1, r1, #8
    64ea:	e7a8      	b.n	643e <main+0x3e>
    64ec:	ffffb000 	.word	0xffffb000
